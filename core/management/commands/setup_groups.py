from django.core.management.base import BaseCommand
from django.contrib.auth.models import Group, Permission, User
from django.contrib.contenttypes.models import ContentType
from connections.models import DatabaseConnection
from reports.models import Report, ReportFolder, ReportFilter


class Command(BaseCommand):
    help = 'Configura os grupos iniciais de usu√°rios com permiss√µes refinadas (Fase 2)'

    def add_arguments(self, parser):
        parser.add_argument(
            '--reset',
            action='store_true',
            help='Reset completo dos grupos e permiss√µes',
        )
        parser.add_argument(
            '--verbose',
            action='store_true',
            help='Mostrar informa√ß√µes detalhadas',
        )

    def handle(self, *args, **options):
        verbose = options['verbose']
        reset = options['reset']
        
        if reset:
            self.stdout.write(
                self.style.WARNING('Resetando grupos e permiss√µes...')
            )
            Group.objects.filter(name__in=['Tecnicos', 'Usuarios']).delete()
        
        self.stdout.write(
            self.style.SUCCESS('=== Configurando Grupos - Fase 2 ===')
        )
        
        # Criar grupos b√°sicos
        tecnicos_group, tecnicos_created = Group.objects.get_or_create(name='Tecnicos')
        usuarios_group, usuarios_created = Group.objects.get_or_create(name='Usuarios')

        if tecnicos_created or usuarios_created:
            self.stdout.write(
                self.style.SUCCESS('‚úì Grupos criados/atualizados com sucesso!')
            )
        else:
            self.stdout.write(
                self.style.WARNING('‚ö† Grupos j√° existiam')
            )

        # Configurar permiss√µes detalhadas
        self._setup_tecnicos_permissions(tecnicos_group, verbose)
        self._setup_usuarios_permissions(usuarios_group, verbose)
        
        # Mostrar estat√≠sticas
        self._show_statistics()
        
        self.stdout.write(
            self.style.SUCCESS('\nüéâ Setup dos grupos conclu√≠do com sucesso!')
        )
        self.stdout.write('üìã Resumo dos perfis:')
        self.stdout.write('   ‚Ä¢ Tecnicos: Acesso completo ao sistema + toggle de visualiza√ß√£o')
        self.stdout.write('   ‚Ä¢ Usuarios: Visualiza√ß√£o de relat√≥rios permitidos + execu√ß√£o/export')

    def _setup_tecnicos_permissions(self, group, verbose):
        """Configura permiss√µes completas para t√©cnicos"""
        if verbose:
            self.stdout.write('\n--- Configurando T√©cnicos ---')
        
        # T√©cnicos t√™m TODAS as permiss√µes
        all_permissions = Permission.objects.all()
        group.permissions.set(all_permissions)
        
        if verbose:
            self.stdout.write(f'‚úì {all_permissions.count()} permiss√µes atribu√≠das aos T√©cnicos')
        
        # Permiss√µes espec√≠ficas de t√©cnico (al√©m das padr√£o do Django)
        custom_permissions = [
            'Pode alternar entre modo t√©cnico e usu√°rio',
            'Pode gerenciar conex√µes de banco de dados',
            'Pode criar e editar relat√≥rios',
            'Pode gerenciar pastas de relat√≥rios',
            'Pode atribuir permiss√µes de usu√°rios',
            'Pode executar qualquer relat√≥rio',
            'Pode acessar logs do sistema',
        ]
        
        if verbose:
            self.stdout.write('‚úì Permiss√µes especiais de t√©cnico configuradas:')
            for perm in custom_permissions:
                self.stdout.write(f'   ‚Ä¢ {perm}')

    def _setup_usuarios_permissions(self, group, verbose):
        """Configura permiss√µes limitadas para usu√°rios"""
        if verbose:
            self.stdout.write('\n--- Configurando Usu√°rios ---')
        
        # Permiss√µes b√°sicas para usu√°rios
        allowed_permissions = []
        
        # Permiss√µes de visualiza√ß√£o de relat√≥rios
        try:
            report_ct = ContentType.objects.get_for_model(Report)
            view_report_perm = Permission.objects.get(
                content_type=report_ct,
                codename='view_report'
            )
            allowed_permissions.append(view_report_perm)
            
            if verbose:
                self.stdout.write('‚úì Permiss√£o de visualiza√ß√£o de relat√≥rios')
        except Permission.DoesNotExist:
            if verbose:
                self.stdout.write('‚ö† Permiss√£o view_report n√£o encontrada')
        
        # Permiss√µes de visualiza√ß√£o de pastas
        try:
            folder_ct = ContentType.objects.get_for_model(ReportFolder)
            view_folder_perm = Permission.objects.get(
                content_type=folder_ct,
                codename='view_reportfolder'
            )
            allowed_permissions.append(view_folder_perm)
            
            if verbose:
                self.stdout.write('‚úì Permiss√£o de visualiza√ß√£o de pastas')
        except Permission.DoesNotExist:
            if verbose:
                self.stdout.write('‚ö† Permiss√£o view_reportfolder n√£o encontrada')
        
        # Atribuir permiss√µes ao grupo
        group.permissions.set(allowed_permissions)
        
        if verbose:
            self.stdout.write(f'‚úì {len(allowed_permissions)} permiss√µes atribu√≠das aos Usu√°rios')
        
        # Funcionalidades permitidas para usu√°rios
        user_functions = [
            'Visualizar relat√≥rios permitidos',
            'Executar relat√≥rios com filtros',
            'Exportar relat√≥rios para Excel',
            'Navegar em pastas autorizadas',
            'Pesquisar relat√≥rios',
        ]
        
        if verbose:
            self.stdout.write('‚úì Funcionalidades permitidas para usu√°rios:')
            for func in user_functions:
                self.stdout.write(f'   ‚Ä¢ {func}')

    def _show_statistics(self):
        """Mostra estat√≠sticas dos grupos configurados"""
        tecnicos_count = User.objects.filter(groups__name='Tecnicos').count()
        usuarios_count = User.objects.filter(groups__name='Usuarios').count()
        total_users = User.objects.count()
        
        self.stdout.write('\nüìä Estat√≠sticas atuais:')
        self.stdout.write(f'   ‚Ä¢ Total de usu√°rios: {total_users}')
        self.stdout.write(f'   ‚Ä¢ T√©cnicos: {tecnicos_count}')
        self.stdout.write(f'   ‚Ä¢ Usu√°rios: {usuarios_count}')
        self.stdout.write(f'   ‚Ä¢ Sem grupo: {total_users - tecnicos_count - usuarios_count}')
        
        # Mostrar modelos configurados
        models_count = {
            'Conex√µes': DatabaseConnection.objects.count(),
            'Relat√≥rios': Report.objects.count(),
            'Pastas': ReportFolder.objects.count(),
            'Filtros': ReportFilter.objects.count(),
        }
        
        self.stdout.write('\nüìà Objetos no sistema:')
        for model_name, count in models_count.items():
            self.stdout.write(f'   ‚Ä¢ {model_name}: {count}')

    def _create_demo_users(self):
        """Cria usu√°rios de demonstra√ß√£o (opcional)"""
        demo_users = [
            {
                'username': 'admin_tecnico',
                'email': 'admin@codeforge.com',
                'first_name': 'Admin',
                'last_name': 'T√©cnico',
                'group': 'Tecnicos',
                'is_staff': True,
            },
            {
                'username': 'usuario_teste',
                'email': 'usuario@codeforge.com',
                'first_name': 'Usu√°rio',
                'last_name': 'Teste',
                'group': 'Usuarios',
                'is_staff': False,
            }
        ]
        
        for user_data in demo_users:
            username = user_data.pop('username')
            group_name = user_data.pop('group')
            
            user, created = User.objects.get_or_create(
                username=username,
                defaults=user_data
            )
            
            if created:
                user.set_password('123456')  # Senha padr√£o para demo
                user.save()
                
                # Adicionar ao grupo
                group = Group.objects.get(name=group_name)
                user.groups.add(group)
                
                self.stdout.write(
                    self.style.SUCCESS(f'‚úì Usu√°rio demo criado: {username} ({group_name})')
                )